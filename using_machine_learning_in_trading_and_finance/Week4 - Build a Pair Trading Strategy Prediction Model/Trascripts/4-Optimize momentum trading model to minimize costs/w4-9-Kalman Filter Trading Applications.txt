Now that you have a basic understanding
of how to construct the Kalman Filter. We're going to explore a couple of
ways that the Kalman method can be used to generate trade signals and also help you calculate better hedge
ratios for better hedge strategies. We will design a Kalman estimator and compare its value to moving averages
calculated with varying time windows. We will also use the Kalman framework
to estimate regression coefficients. Kalman estimators are used
in momentum strategies where trading signal is generated by
a moving average crossover. They are also used to
dynamically adjust head ratios in a mean reverting
trading strategy. The Kalman Filter updates estimates at
every time step intends to wait more recent observations more
heavily than older ones. This is similar to but not the same
as an exponential moving average. This provides useful estimates of
rolling parameters of the data. When using a Kalman filter, there's no
window length that you need to specify. This is useful for computing the moving
average if that's what you are interested in or for smoothing out
estimates of other quantities such as the moving Sharpe ratio. We'll use both a Kalman filter and
a 50 and 100 day moving average to estimate
the rolling mean of a data series. We hope that the mean describes
our observations well, so it shouldn't change too much
when we add an observation. Therefore, we assume that it involves as
a random walk with a small error term. The mean is the models guess for the mean of the distribution from which
the measurements are being drawn. So our prediction of the next value is
simply equal to our estimate of the mean. We assume that the observations have
a variance of one around the rolling mean. Our initial guess for the mean is zero. Please use the code above to load pricing
data, construct the Kalman filter, and calculate the rolling
mean of prices for Apple. Keep in mind that we are assuming
the transition and observation matrices are equal to 1 and
the initial state is assumed to be 0. We will compare the Kalman estimate
of the rolling mean to the 50 and a 100 day moving averages for
the same price series. Our initial guess for the mean is 0, but
the filter quickly realizes that that is incorrect and adjust its estimate to
converge with the Apple price series. You can see that the Kalman estimate
smooths out the series less than the moving averages. The advantage of the Kalman filter is that
we don't need to select a window length so we run the less risk of overfitting. We do open ourselves up to overfitting
with some of the initialization parameters for the filter. But those are slightly easier
to objectively define. There's no free lunch and we can
eliminate overfitting but a Kalman filter is more rigorous than a moving average and
generally more effective. Kalman estimators are used in
strategies where the trading signal is generated by a moving average crossover. Let's figure out the inputs
to our Kalman filter. We'll say that the state
of our system is the line that the observations are following
with parameters alpha and beta. Our initial guess for
these parameters is 0 and 0, with a covariance matrix which describes
the error of our guess of all ones. As in the example of the rolling mean, we assume that our parameters
follow a random walk. Which means the transition matrix
is the identity with a small error term transitions covariance is
a small number times the identity. To get from the state of our
system to an observation, we dot the state beta
alpha with x sub i1 to get beta x sub i plus alpha equals y sub i. So our observation matrix is just
a column of ones glued to x. Please use the code above to model
randomness in the series and construct a Kalman filter to evolve our
estimates of the parameters alpha and beta for Apple and SPY. We assume that the variance
of our observations y is 2. Now we are ready to use our observations of y to evolve our estimates of
the parameters alpha and beta. We will use colors to indicate the dates
that the data points x sub i and y sub i correspond to. Notice how much the parameters
fluctuate over long periods of time. We are basing a trading algorithm on this
such something that involves beta hedging. It's important to have the best and
the most current estimates of beta. In order to minimize clutter, we will only plot every 5th common
estimate of alpha and beta. We'll also adjust the plot
axis to improve visibility. Notice that although each of the state
estimates takes into account all previous observations, they fit the more recent
data better than the older data. This allows the filter to adapt to
structural changes in the data over time. We now calculate returns
from the price data and run the Kalman filter to estimate
alpha and beta for returns. Once again, we only plot every fifth
estimate in order to minimize clutter. Although the raw data is
much more jumbled here, we can see the regression line evolving. The estimate of beta increases gradually
from around 0 to about the same as the ordinary least squares regression
shown by the heavier black line. You can read more about this and
other topics related to Kalman filter and finance at the link given here.